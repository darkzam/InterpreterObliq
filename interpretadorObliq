#lang eopl


(define especificacion-lexica
  '(
    (espacio (whitespace) skip)
    (comentario ("//" (arbno (not #\newline))) skip)
    (identificador (letter (arbno (or letter digit "_" "?"))) symbol)
    (caracter ("'" (or letter digit) "'" ) string)
    (cadena ("\"" (arbno (or letter digit)) "\"" ) string)
    (numero ((or digit (concat "-" digit)) (arbno digit)) string)
    )
  )

(define especificacion-gramatical
  '(
    (programa  (expresion) un-programa)
    ;;Expresiones constantes
    (expresion (numero) numero-exp)
    (expresion (caracter) caracter-exp)
    (expresion (cadena) cadena-exp)
    (expresion ("ok") ok-exp)
    ;; Variables. 
    (expresion (identificador) id-exp) ;;Consulta de variable
    (expresion ("var" (separated-list identificador "=" expresion ",") "in" expresion "end" ) var-exp)
    (expresion ("let" (separated-list identificador "=" expresion ",") "in" expresion "end") let-exp)
    (expresion ("let rec" (separated-list identificador "(" (separated-list identificador ",") ")" "=" expresion ",") "in" expresion "end") letrec-exp)
    (expresion ("set" identificador ":=" expresion ) set-exp)
    ;; Condicionales
    (expresion ("if" expresion "?" expresion ":" expresion) if-exp)
    (expresion ("cond" (arbno "[" expresion expresion "]") "else" expresion) cond-exp)
    ;;Primitivas
    ;(expresion (primitive "(" expresion (arbno "," expresion) ")") primitiva-exp)
    ;Como el uso de primitiva requiere 2 o mas argumentos por facilidad se agruparon todos los parametros en una sola lista
    (expresion (primitive "(" (separated-list expresion ",")")") prim-exp)
   ;; Operaciones aritméticas
    (primitive ("+") sum-prim)
    (primitive ("-") sub-prim)
    (primitive ("*") mul-prim)
    (primitive ("/") div-prim)
    ;; Comparación
    (primitive ("<")  menor-prim)
    (primitive ("=<") menig-prim)
    (primitive (">")  mayor-prim)
    (primitive (">=") mayig-prim)
    (primitive ("==") igual-prim)
    ;; Listas y vectores
    (primitive ("size") size-prim) ;;Retorna el tamaño de la lista
    (primitive ("nth") nth-prim) ;; Retorna el n-esimo elemento de a lista (se cuenta desde 1 hasta n)
    ;; Vector
    (primitive ("agregar") add-vector-prim) ;;Agrega un elemento a un vector
    (primitive ("delete") del-vector-prim) ;;Borrar un elemento de un vector
    )
  )


;;Definir datatypes
(sllgen:make-define-datatypes especificacion-lexica especificacion-gramatical)

;;Mostrar Datatyoes
(define show-the-datatypes
  (lambda () (sllgen:list-define-datatypes especificacion-lexica especificacion-gramatical)))

;;Escaner
(define just-scan (sllgen:make-string-scanner especificacion-lexica especificacion-gramatical))

;;Parse
(define prueba (sllgen:make-string-parser especificacion-lexica especificacion-gramatical))

;(prueba "let rec a(x,y,z)=4 in g end")
;(prueba "let in g end")
;(prueba "let rec a(x,y,z)=4 , b(x,y,z)=g in +(a,b) end")