#lang eopl


(define especificacion-lexica
  '(
    (espacio (whitespace) skip)
    (comentario ("//" (arbno (not #\newline))) skip)
    (identificador (letter (arbno (or letter digit "_" "?"))) symbol)
    (caracter ("'" (or letter digit) "'" ) string)
    (cadena ("\"" (arbno (or letter digit)) "\"" ) string)
    (numero ((or digit (concat "-" digit)) (arbno digit)) string)
    )
  )

(define especificacion-gramatical
  '(
    (programa  (expresion) un-programa)
    ;;Expresiones constantes
    (expresion (numero) numero-exp)
    (expresion (caracter) caracter-exp)
    (expresion (cadena) cadena-exp)
    (expresion ("ok") ok-exp)
  ;  (expresion (bool-expresion) bool-exp)
    ;; Variables. 
    (expresion (identificador) id-exp) ;;Consulta de variable
    (expresion ("var" (separated-list identificador "=" expresion ",") "in" expresion "end" ) var-exp)
    (expresion ("let" (separated-list identificador "=" expresion ",") "in" expresion "end") let-exp)
    (expresion ("let rec" (separated-list identificador "(" (separated-list identificador ",") ")" "=" expresion ",") "in" expresion "end") letrec-exp)
    ;;seteo de variable
    (expresion ("set" identificador ":=" expresion ) set-exp)
    ;;ejecucion secuencial
    (expresion ("begin" expresion (arbno ";" expresion) "end") begin-exp)
    ;;primitiva expresion
    (expresion (primitiva "(" (arbno expresion) ")" ) prim-exp)
    ;; Condicionales
    (expresion ("if" bool-expresion "then" expresion (arbno "elseif" bool-expresion "then" expresion)"else" expresion "end") if-exp)
    ;;expresiones booleanas
    (bool-expresion ("true") true-exp)
    (bool-expresion ("false") false-exp)
    (bool-expresion (bool-primitiva "("(separated-list expresion "," ) ")" ) bool-prim-exp) ;aplica un operador primitivo booleano a unas expresiones
    (bool-expresion (bool-oper "(" (separated-list bool-expresion "," ) ")" ) bool-oper-expr) ;aplica un operador booleano diferente a los default a unas expresiones
    ;;procedimientos
    (expresion ("proc" "(" (separated-list identificador ",") ")" expresion "end") proc-exp)
    ;;apply
    (expresion ("apply" identificador "(" (separated-list expresion ",") ")") apply-exp)
    ;;methodos
    (expresion ("meth" "(" identificador "," (separated-list identificador ",") ")" expresion "end") meth-exp)
    ;;for
    (expresion ("for" identificador "=" expresion "to" expresion "do" expresion "end") for-exp)
    ;;object
    (expresion ("object" "{" (separated-list identificador "=>" expresion ",") "}") obj-exp)
    ;;get
    (expresion ("get" identificador "." identificador) get-exp)
    ;;send
    (expresion ("send" identificador "." identificador "(" (separated-list identificador ",") ")") send-exp)
    ;;update
    (expresion ("update" identificador "." identificador ":=" expresion ) update-exp)
    ;;clone
    (expresion ("clone" "(" identificador (separated-list identificador ",") ")" ) clone-exp)  
    ;;Primitivas
   ;;primitvas aritmeticas
    (primitiva ("+") add-prim)
    (primitiva ("-") substract-prim)
    (primitiva ("*") mult-prim)
    (primitiva ("%") modul-prim)
    (primitiva ("/") div-prim)
    ;;primitiva concatenar
    (primitive ("&") concat-prim)
     ;;primitvas booleanas
    (bool-primitiva ("<") menor-bool-prim)
    (bool-primitiva (">") mayor-bool-prim)
    (bool-primitiva ("<=") menorig-bool-prim)
    (bool-primitiva (">=") mayorig-bool-prim)
    (bool-primitiva ("is") igual-bool-prim)
    ;;Operacion booleana
    (bool-oper ("not") not-oper)
    (bool-oper ("and") and-oper)
    (bool-oper ("or") or-oper)
  ))


;;Definir datatypes
(sllgen:make-define-datatypes especificacion-lexica especificacion-gramatical)

;;Mostrar Datatyoes
(define show-the-datatypes
  (lambda () (sllgen:list-define-datatypes especificacion-lexica especificacion-gramatical)))

;;Escaner
(define just-scan (sllgen:make-string-scanner especificacion-lexica especificacion-gramatical))

;;Parse
(define prueba (sllgen:make-string-parser especificacion-lexica especificacion-gramatical))

;(prueba "let rec a(x,y,z)=4 in g end")
;(prueba "let in g end")
;(prueba "let rec factorial(x,y,z)=4 , b(x,y,z)=g in +(a,b) end")
;(prueba "if false then b elseif false then g else g end")
;;(prueba "if >(a,b) then b elseif false then g else g end")
;;(prueba "proc (a,b,c,d,f,f,g) +(a b c e) end")
;;(prueba "apply funcion() ")
;;(prueba "apply funcion(a,v,b,f,g,h,h) ")
;; (prueba "meth(s,) s end")
;;(prueba "meth(s,ab,c,f) s end")
;;(prueba "object {}")
;;(prueba "object {m=>g, h=>j, k=> l}")
;; (prueba "clone(s0)")
;;(prueba "send a.m(h,h,h,h,h,h,h)")